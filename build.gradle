plugins {
    id 'java'
    id 'application'
    id "de.undercouch.download" version "3.4.3"
}

mainClassName = 'App'

dependencies {
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'org.seleniumhq.selenium:selenium-java:3.14.0'
    compile 'io.cucumber:cucumber-java8:4.2.0'

    testCompile 'junit:junit:4.12'
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
}

// project specific tasks

clean.doFirst {
    println "cleaning extra directories ..."
    file("drivers").deleteDir()
}

task downloadDrivers(type: Download) {
    src ([  "https://github.com/mozilla/geckodriver/releases/download/$gekodriver_version/geckodriver-$gekodriver_version-win64.zip",
            "https://github.com/mozilla/geckodriver/releases/download/$gekodriver_version/geckodriver-$gekodriver_version-linux64.tar.gz",
            "https://github.com/mozilla/geckodriver/releases/download/$gekodriver_version/geckodriver-$gekodriver_version-macos.tar.gz",
            "https://chromedriver.storage.googleapis.com/$chromedriver_version/chromedriver_win32.zip",
            "https://chromedriver.storage.googleapis.com/$chromedriver_version/chromedriver_linux64.zip",
            "https://chromedriver.storage.googleapis.com/$chromedriver_version/chromedriver_mac64.zip"
    ])
    dest 'build/drivers'
    overwrite false
}

// unpack downloaded drivers to each corresponding package type.
task drivers {
    dependsOn downloadDrivers
    doLast{
        fileTree(dir: 'build/drivers').include('*.tar.gz').each { myFile ->
            copy {
                println "Processing ${myFile.name}"
                def name = myFile.name - '.tar.gz'
                from tarTree("build/drivers/${myFile.name}")
                into "drivers/${name}"
            }
        }
        fileTree(dir: 'build/drivers').include('*.zip').each { myFile ->
            copy {
                println "Processing ${myFile.name}"
                def name = myFile.name - '.zip'
                from zipTree("build/drivers/${myFile.name}")
                into "drivers/${name}"
            }
        }
    }
}

task showVersions {
    doLast {
        println "Show: Versions: $version | chromedriver: ${chromedriver_version} | gekodriver: ${gekodriver_version}"
    }
}

// cleanup dist extra files
clean.doFirst {
    delete fileTree(dir: '/src/dist/drivers', include: ['*'])
    delete fileTree(dir: '/src/dist/features', include: ['*'])
}

// startScripts are called before buildZip and buildTar
startScripts {
    doLast {
        println "Executing after startScripts"
        copy {
            from './'
            include 'README.md'
            into '/src/dist'
        }
        copy {
            from 'src/main/resources/cucumber/'
            include '*.feature'
            into '/features/'
        }
        copy {
            from 'src/main/resources/cucumber/'
            include '*.feature'
            into '/src/dist/features/'
        }
        copy {
            from 'drivers/'
            include '**/*'
            into '/src/dist/drivers/'
        }
    }
}
